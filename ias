# --- Main Checks ---
if ($ExecutionContext.SessionState.LanguageMode.value__ -ne 0) {
    Write-Host "Windows PowerShell is not running in Full Language Mode."
    return
}

function Check3rdAV {
    $avList = Get-CimInstance -Namespace root\SecurityCenter2 -Class AntiVirusProduct | Where-Object { $_.displayName -notlike '*windows*' } | Select-Object -ExpandProperty displayName
    if ($avList) {
        Write-Host "A 3rd party antivirus may be blocking:"
        Write-Host (" - " + ($avList -join ", "))
    }
}
function CheckFile {
    param([string]$FilePath)
    if (-not (Test-Path $FilePath)) {
        Check3rdAV
        Write-Host "File not found or not created: $FilePath, aborting!"
        throw
    }
}

# --- Main Variables ---
$tempDir = "$env:TEMP\AUTOMATE-$(Get-Random)"
$url = "https://github.com/Christianzgaming/idmchanzaiv3/releases/download/idmchanzaiv3/idmchanzaiv3.zip"
$output = "$tempDir\idmchanzaiv3.zip"
$extractDir = "$tempDir\extracted"

# Create directories as needed
if (!(Test-Path $tempDir)) { New-Item -ItemType Directory -Path $tempDir | Out-Null }
if (!(Test-Path $extractDir)) { New-Item -ItemType Directory -Path $extractDir | Out-Null }

try {
    Invoke-WebRequest -Uri $url -OutFile $output
} catch {
    Check3rdAV
    Write-Host "Could not download the ZIP. Automatic abort."
    exit 1
}
CheckFile $output

# Extract ZIP
try {
    Expand-Archive -Path $output -DestinationPath $extractDir -Force
} catch {
    Write-Host "Extraction failed! Aborting..."
    exit 1
}

# Find .cmd/.bat file (IASL.cmd or others) in any subfolder
$batchFile = Get-ChildItem -Path $extractDir -Recurse -Include IASL.cmd,*.cmd,*.bat | Where-Object { $_.Name -ieq "IASL.cmd" -or $_.Extension -in ".cmd",".bat" } | Select-Object -First 1

if (-not $batchFile) {
    Write-Host "No batch file (.cmd/.bat) found in the extracted folder. Aborting."
    exit 1
}

# Run with Start-Process and wait to finish
try {
    Start-Process -FilePath $batchFile.FullName -Wait
} catch {
    Write-Host "Unable to run the batch file!"
    exit 1
}

# Cleanup
Write-Host "Cleaning up temp files..."
Remove-Item -Path $output -Force -ErrorAction SilentlyContinue
Remove-Item -Path $tempDir -Recurse -Force -ErrorAction SilentlyContinue

Write-Host "Done. Enjoy!"